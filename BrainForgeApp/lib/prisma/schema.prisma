// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String        @unique
  passwordHash  String
  lmsUserId     Int?          @unique
  projects      Project[]
  contextRoles  ContextRole[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum RoleKey {
  SITE_ADMIN
  SITE_USER
}

model Role {
  id           Int           @id @default(autoincrement())
  roleKey      RoleKey       @unique
  contextRoles ContextRole[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model ContextRole {
  id        Int      @id @default(autoincrement())
  contextId String?
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  roleId    Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Project {
  id          Int          @id @default(autoincrement())
  title       String
  description String
  userId      Int
  user        User         @relation(fields: [userId], references: [id])
  materials   Material[]   // One-to-many relationship with materials
  history     History[]    // One-to-many relationship with history
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}


model Material {
  id          Int          @id @default(autoincrement())
  type        MaterialType // Enum for material type (PDF, YouTube, Text)
  content     String       // URL for YouTube, text for text, or file path for PDF
  projectId   Int
  project     Project      @relation(fields: [projectId], references: [id])
  createdAt   DateTime     @default(now())
}


model History {
  id              Int          @id @default(autoincrement())
  type            HistoryType  // Enum for Assignment or Challenge
  instructions    String       // Instructions for the assignment or challenge
  starterCode     String?      // Optional starter code for challenges
  expectedOutput  String?      // Optional expected output for challenges
  projectId       Int
  project         Project      @relation(fields: [projectId], references: [id])
  chatHistory     ChatHistory[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}


model ChatHistory {
  id          Int      @id @default(autoincrement())
  historyId   Int
  history     History  @relation(fields: [historyId], references: [id])
  userMessage String
  aiMessage   String
  createdAt   DateTime @default(now())
}

enum MaterialType {
  PDF
  YOUTUBE
  TEXT
}

enum HistoryType {
  ASSIGNMENT
  CHALLENGE
}